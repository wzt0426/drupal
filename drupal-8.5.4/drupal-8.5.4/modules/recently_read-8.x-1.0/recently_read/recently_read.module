<?php

use Drupal\recently_read\Entity\RecentlyReadType;
use Drupal\recently_read\Entity\RecentlyRead;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_entity_view().
 */
function recently_read_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $recentlyRead = \Drupal::service('recently_read');

  // Disable cache.
  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($build, $entity->id());
  // Get recently read config for current entity.
  $readTypeConfig = RecentlyReadType::load($entity->getEntityTypeId());
  $entityType = $entity->getEntityTypeId();

  // Check entity type and act properly based on entityType.
  switch ($entityType) {
    case ($entityType == "node" && $view_mode === "full" && $readTypeConfig->get('enabled')):
      $allowedTypes = $readTypeConfig->getTypes();
      if (in_array($entity->bundle(), $allowedTypes)) {
        $recentlyRead->insert_entity($entity);
      }
      break;

    case ($entityType == "taxonomy_term" && $view_mode === "full" && $readTypeConfig->get('enabled')):
      $allowedTypes = $readTypeConfig->getTypes();
      if (in_array($entity->bundle(), $allowedTypes)) {
        $recentlyRead->insert_entity($entity);
      }
      break;

    case ($entityType == "user" && $view_mode === "full" && $readTypeConfig->get('enabled')):
      $recentlyRead->insert_entity($entity);
      break;
  }
}

/**
 * Implements hook_hook().
 */
function recently_read_cron() {
  $config = Drupal::configFactory()->getEditable('recently_read.configuration');
  $recentlyRead = \Drupal::service('recently_read');
  switch ($config->get('delete_config')) {
    case "time":
      $time = $config->get('delete_time');
      $query = \Drupal::entityQuery('recently_read')->condition('created', strtotime($time), '<=');
      $records = $query->execute();
      if ($records) {
        $recentlyRead->deleteRecords($records);
      }
      break;
  }
}
